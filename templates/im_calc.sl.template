source machine_env.sh

export IMPATH=$gmsim/IM_calculation
export PYTHONPATH=$gmsim/qcore:/$PYTHONPATH:$IMPATH

script_start=`date`
echo "script started running at: $script_start"

runtime_fmt="%Y-%m-%d_%H:%M:%S"

{% if sim_dirs %}
echo ___calculating simulations___
{% for sim_dir, sim_name, fault_name in sim_dirs %}
    echo {{sim_dir}}
    #update db to running
    timestamp=`date +%Y%m%d_%H%M%S`
    start_time=`date +$runtime_fmt`
    echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} IM_calculation running --run_name {{sim_name}} --j $SLURM_JOBID" >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
    #run the script
    time python2 $IMPATH/calculate_ims.py {{sim_dir}}/Acc/BB.bin b -o {{sim_dir}}/../../../IM_calc/ -np {{np}} -i {{sim_name}} -r {{fault_name}} -c {{comp}} -t s {{extended}} {{simple}}

#test before update mgmt_db
    timestamp=`date +%Y%m%d_%H%M%S`
    end_time=`date +$runtime_fmt`
    res=`python $gmsim/workflow/scripts/im_calc_checkpoint.py {{mgmt_db_location}}/Runs {{sim_name}} --t s --v `
#update mgmt_db
    if [[ $? == 0 ]]; then
        #passed
        echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} IM_calculation completed --run_name {{sim_name}} --force" >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
        #save metadata for collection
        #TODO:fix the weird naming
        if [[ ! -d {{mgmt_db_location}}/Runs/{{fault_name}}/ch_log ]]; then
            mkdir {{mgmt_db_location}}/Runs/{{fault_name}}/ch_log
        fi
        #TODO: adjust this temporary code to use the update_db once merged
        cd {{mgmt_db_location}}/Runs/{{fault_name}}
        fd_name=`python -c "import params_base as pb; print pb.FD_STATLIST"`
        fd_count=`cat $fd_name | wc -l`
        nt=`python -c "import params_base as pb; nt = float(pb.sim_duration)/float(pb.hf_dt);print int(nt)"`
        
        run_time=`python -c "from datetime import datetime; tdelta= datetime.strptime('$end_time', '$runtime_fmt') - datetime.strptime('$start_time', '$runtime_fmt'); print tdelta.total_seconds()/3600"`

        echo "{{sim_name}} IM_calc $SLURM_JOBID {{np}} $fd_count $nt $run_time $runtime_start $runtime_end" >> {{mgmt_db_location}}/Runs/{{fault_name}}/ch_log/IM_calc.{{sim_name}}.log
        #
    else
        #failed
        echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} IM_calculation failed --run_name {{sim_name}} --error '$res' --force"  >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
    fi
{% endfor %}
{% endif %}


{% if obs_dirs %}
echo ___calculating observed____
{% for obs_dir, obs_name, fault_name in obs_dirs %}
    echo {{obs_dir}}
	time python2 $IMPATH/calculate_ims.py {{obs_dir}}/*/*/accBB a -o {{obs_dir}}/../IM_calc/ -np {{np}} -i {{obs_name}} -r {{fault_name}} -c {{comp}} -t o {{extended}} {{simple}}
{% endfor %}
{% endif %}

{% if rrup_files %}
echo ___calculating rrups___
{% for srf_file, srf_output, fd in rrup_files %}
	time python2 $IMPATH/calculate_rrups.py -np {{np}} -o {{output_dir}}/{{srf_output}}.csv {{station_file}} {{srf_file}} {{fd}} 
{% endfor %}
{% endif %}

date
