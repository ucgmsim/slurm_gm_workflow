#

#updating the stats in managementDB
if [[ ! -d {{mgmt_db_location}}/mgmt_db_queue ]]; then
    #create the queue folder if not exist
    mkdir {{mgmt_db_location}}/mgmt_db_queue
fi
timestamp=`date +%Y%m%d_%H%M%S`
echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} HF running --run_name {{srf_name}} --job $SLURM_JOBID" >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID

runtime_fmt="%Y-%m-%d_%H:%M:%S"
start_time=`date +$runtime_fmt`
echo $start_time
{{submit_command}}
end_time=`date +$runtime_fmt`
echo $end_time 

timestamp=`date +%Y%m%d_%H%M%S`
#test before update
res=`$gmsim/workflow/scripts/{{test_hf_script}} {{sim_dir}} `
if [[ $? == 0 ]]; then
    #passed
    echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} HF completed --run_name {{srf_name}} --force " >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
    #save the parameters
    if [[ ! -d {{sim_dir}}/ch_log ]]; then
        mkdir {{sim_dir}}/ch_log
    fi
    fd_name=`python -c "from qcore import utils; p = utils.load_sim_params('{{sim_dir}}/sim_params.yaml'); print(p['FD_STATLIST'])"`
    fd_count=`cat $fd_name | wc -l`

    # Save meta data
    python $gmsim/workflow/metadata/log_metadata.py {{sim_dir}} HF cores=$SLURM_NTASKS fd_count=$fd_count start_time=$start_time end_time=$end_time
else
    #reformat $res to remove '\n'
    res=`echo $res | tr -d '\n'`
    echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} HF created --run_name {{srf_name}} --error '$res' --force --is_retry" >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
fi
