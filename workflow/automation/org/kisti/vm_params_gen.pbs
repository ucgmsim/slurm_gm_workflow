#!/bin/bash

# script version: pbs
#
# must be run with qsub -v realisationCSV=A,OUTPUT_DIR=B,VM_VERSION=C,VM_TOPO=D,HH=E,PGV_THRESHOLD=F,DS_MULTIPLIER=G,MGMT_DB_LOC=H,MGMT_DB_LOC=I, REL_NAME=J, -V vm_params_gen.pbs
#PBS -N VM_PARAMS
#PBS -V
#PBS -q normal
#PBS -A inhouse
#PBS -l select=1:ncpus=1
#PBS -l walltime=00:30:00
#PBS -W sandbox=PRIVATE
export SLURM_JOB_ID="${PBS_JOBID/.pbs/}"
export SLURM_CPUS_PER_TASK=$(qstat $SLURM_JOB_ID -f | grep "used.ncpus" | cut -d"=" -f2 | bc)
export SLURM_NNODES=$(qstat $SLURM_JOB_ID -f | grep "List.nodect" | cut -d"=" -f2 | bc)

FAULT=$(echo $REL_NAME | cut -d"_" -f1)
SIM_DIR=$MGMT_DB_LOC/Runs/$FAULT/$REL_NAME
CH_LOG_FFP=$SIM_DIR/ch_log

if [[ ! -d $OUTPUT_DIR ]]; then
    mkdir -p $OUTPUT_DIR
fi

#updating the stats in managementDB
if [[ ! -d $MGMT_DB_LOC/mgmt_db_queue ]]; then
    #create the queue folder if not exist
    mkdir $MGMT_DB_LOC/mgmt_db_queue
fi
timestamp=`date +%Y%m%d_%H%M%S`
runtime_fmt="%Y-%m-%d_%H:%M:%S"
start_time=`date +$runtime_fmt`
echo $start_time

python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py $MGMT_DB_LOC/mgmt_db_queue $REL_NAME VM_PARAMS running $SLURM_JOB_ID --start_time "$start_time" --nodes $SLURM_NNODES --cores $SLURM_CPUS_PER_TASK --wct 00:30:00

if [ "${REL_FILEPATH##*.}" == "csv" ]; then 
    echo "python $gmsim/Pre-processing/VM/rel2vm_params.py -o $OUTPUT_DIR --hh $HH --vm-version $VM_VERSION --vm-topo  $VM_TOPO --pgv $PGV_THRESHOLD --ds-multiplier $DS_MULTIPLIER $REL_FILEPATH"
    python "$gmsim/Pre-processing/VM/rel2vm_params.py" -o "$OUTPUT_DIR" --hh "$HH" --vm-version "$VM_VERSION" --vm-topo "$VM_TOPO" --pgv "$PGV_THRESHOLD" --ds-multiplier "$DS_MULTIPLIER" "$REL_FILEPATH"
else
    echo "python $gmsim/Pre-processing/VM/type5_rel2vm_params.py --resolution $HH --vm-version $VM_VERSION --vm-topo  $VM_TOPO --pgv $PGV_THRESHOLD --ds-multiplier $DS_MULTIPLIER $REL_FILEPATH $OUTPUT_DIR/${REL_NAME}_vm_parms.yaml"
    python "$gmsim/Pre-processing/VM/type5_rel2vm_params.py" --resolution "$HH" --vm-version "$VM_VERSION" --vm-topo-type  "$VM_TOPO" --ds-multiplier "$DS_MULTIPLIER" "$REL_FILEPATH" "$OUTPUT_DIR/vm_params.yaml"
fi

end_time=`date +$runtime_fmt`
echo $end_time

timestamp=`date +%Y%m%d_%H%M%S`
res=`python $gmsim/qcore/qcore/validate_vm.py params $OUTPUT_DIR/vm_params.yaml`
pass=$?

if [[ $pass == 0 ]]; then
    #passed

    python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py $MGMT_DB_LOC/mgmt_db_queue $REL_NAME VM_PARAMS completed $SLURM_JOB_ID --end_time "$end_time"

    if [[ ! -d $CH_LOG_FFP ]]; then
        mkdir $CH_LOG_FFP
    fi

    # save meta data
    python $gmsim/workflow/workflow/automation/metadata/log_metadata.py $SIM_DIR VM_PARAMS cores=$SLURM_CPUS_PER_TASK start_time=$start_time end_time=$end_time
else
    #reformat $res to remove '\n'
    res=`echo $res | tr -d '\n'`
    python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py $MGMT_DB_LOC/mgmt_db_queue $REL_NAME VM_PARAMS failed $SLURM_JOB_ID --error "$res" --end_time "$end_time"
fi
