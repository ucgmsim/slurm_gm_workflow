#!/bin/bash

# must be run with
# qsub -v CSV_PATH=[imcalc csv path],STATION_FILE_PATH=[station file path],
#OUTPUT_XYZ_PARENT_DIR=[output xyz dir],SRF_PATH=[srf path],MODEL_PARAMS=[model params path],
#MGMT_DB_LOC=[management database location],SRF_NAME=[realisation name] -V im_plot.pbs

#PBS -N im_plot
#PBS -V
#PBS -q normal
#PBS -A inhouse
#PBS -l select=1:ncpus=8
#PBS -l walltime=00:30:00

#module purge
#module add gcc/7.2.0 openmpi/3.1.0 craype-network-opa craype-mic-knl
#export gmsim_root=/scratch/x2568a02/gmsim_home
#export PYTHONPATH=$gmsim_root/Environments/nurion/workflow
#source $gmsim_root/Environments/nurion/virt_envs/python3_nurion/bin/activate

module_requirments=$(python -c "from qcore.config import module_requirments; print(module_requirments)")
if [[ -f $module_requirments ]];then
    source $module_requirments
else
    # this usually indicates -V failed to pass variables to pbs
    echo "no module requirements found at $module_requirments, binaries may not run properly"
    echo "gmsim: $gmsim"
    exit 404
fi
export SLURM_JOB_ID="${PBS_JOBID/.pbs/}"


#The following params are given with -v option
#CSV_PATH=`realpath $1`
#STATION_FILE_PATH=`realpath $2`
#OUTPUT_XYZ_PARENT_DIR=$3
#SRF_PATH=`realpath $4`
#MODEL_PARAMS=`realpath $5`
#MGMT_DB_LOC=`realpath $6`
#SRF_NAME=$7

mkdir -p $OUTPUT_XYZ_PARENT_DIR
OUTPUT_XYZ_PARENT_DIR=`realpath $OUTPUT_XYZ_PARENT_DIR` # realpath only works if the path exists

COMPS=($(cat $CSV_PATH|cut -d , -f 2 |tail -n+2 |sort|uniq|tr " " "\n")) # find what components are used and makes an array

script_start=`date`
echo "script started running at: $script_start"
runtime_fmt="%Y-%m-%d_%H:%M:%S"
timestamp=`date +%Y%m%d_%H%M%S`

start_time=`date +${runtime_fmt}`
echo ___im plot___

python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py $MGMT_DB_LOC/mgmt_db_queue $SRF_NAME IM_plot running $SLURM_JOB_ID

# check rotd50 was found in .csv
if [[ " ${COMPS[*]} " == *" rotd50 "* ]]; 
then 
    comps_to_plot=(geom rotd50)
else 
    comps_to_plot=(geom)
fi

for comp in ${comps_to_plot[@]};
do 
    OUTPUT_XYZ_DIR=$OUTPUT_XYZ_PARENT_DIR/$comp
    mkdir -p $OUTPUT_XYZ_DIR
    cmd="python $gmsim/visualization/im/spatialise_im.py $CSV_PATH $STATION_FILE_PATH --out_dir $OUTPUT_XYZ_DIR -c $comp"
    #echo $cmd
    res=`$cmd`
    exit_val=$?

    if [[ $exit_val == 0 ]]; then
        echo "finished making csvs for im_plot"

        echo "start plotting stations"
        
        failed=0
        fail_msgs=()
        success_msgs=()
        imorder=`cat $OUTPUT_XYZ_DIR/im_order.txt`
        for f in $OUTPUT_XYZ_DIR/*.xyz; do
            cd $OUTPUT_XYZ_DIR
            out_dir=$(basename $f | cut -d'.' -f1)
            mkdir -p $out_dir
            cd $out_dir
            if [[ "$f" == *"real"* ]]; then
                cmd2="python $gmsim/visualization/sources/plot_items.py -t $SRF_NAME --xyz $f -c '$SRF_PATH' --xyz-cpt hot --xyz-cpt-invert --xyz-transparency 30 --xyz-size 0.1 --xyz-cpt-labels $imorder -n 8"
#                echo $cmd2 
                res2=`$cmd2`

            else
                imorder=`cat $OUTPUT_XYZ_DIR/im_order.txt`
                cmd2="python $gmsim/visualization/sources/plot_items.py -t $SRF_NAME --xyz $f -c '$SRF_PATH' --xyz-model-params $MODEL_PARAMS --xyz-grid --xyz-grid-search 12m --xyz-landmask --xyz-cpt hot --xyz-cpt-invert --xyz-grid-contours --xyz-transparency 30 --xyz-size 1k --xyz-cpt-labels $imorder -n 8"
#                echo $cmd2
                res2=`$cmd2`
            fi
            exit_val2=$?
            if [[ $exit_val2 != 0 ]]; then
                failed=1
                failed_msgs+=( "failed $res2" )
            else
                success_msgs+=( "successfully $res2" )
            fi 
        done

        if [[ $failed == 0 ]]; then
            ## log information about params used to .out file    
            echo "srf_file $SRF_PATH"
            echo "model_params $MODEL_PARAMS"
            printf '%s\n' "${success_msgs[@]}" 
            python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py $MGMT_DB_LOC/mgmt_db_queue $SRF_NAME IM_plot completed $SLURM_JOB_ID
        else
        printf '%s\n' "${failed_msgs[@]}" 
        python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py $MGMT_DB_LOC/mgmt_db_queue $SRF_NAME IM_plot failed $SLURM_JOB_ID --error "$failed_msgs"
        fi
    else
        python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py $MGMT_DB_LOC/mgmt_db_queue $SRF_NAME IM_plot failed $SLURM_JOB_ID --error "$res"
    fi
done

end_time=`date +$runtime_fmt`
echo $end_time

