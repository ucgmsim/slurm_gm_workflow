#

if [[ ! -z ${CUR_ENV} && ${CUR_HPC} != "mahuika" ]]; then
    source $CUR_ENV/workflow/workflow/environments/helper_functions/activate_env.sh $CUR_ENV "mahuika"
fi

if [[ ! -d {{mgmt_db_location}}/mgmt_db_queue ]]; then
    #create the queue folder if not exist
    mkdir {{mgmt_db_location}}/mgmt_db_queue
fi
timestamp=`date +%Y%m%d_%H%M%S`
runtime_fmt="%Y-%m-%d_%H:%M:%S"
start_time=`date +$runtime_fmt`

python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py {{mgmt_db_location}}/mgmt_db_queue {{srf_name}} merge_ts running $SLURM_JOB_ID  --start_time "$start_time" --nodes $SLURM_NNODES --cores $SLURM_NTASKS --wct "$wct"

merge_ts {{sim_dir}}/LF/OutBin {{sim_dir}}/LF/OutBin/{{srf_name}}_xyts.e3d

timestamp=`date +%Y%m%d_%H%M%S`
end_time=`date +$runtime_fmt`

rm $filelist
#test before update
res=`$gmsim/workflow/workflow/calculation/verification/test_merge_ts.sh {{sim_dir}} {{srf_name}}`
success=$?
echo "$res"

if [[ $success == 0 ]]; then
    #passed
    echo "passed"
    python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py {{mgmt_db_location}}/mgmt_db_queue {{srf_name}} merge_ts completed $SLURM_JOB_ID --end_time "$end_time"

    #save meta data
    cmd="python $gmsim/workflow/workflow/automation/metadata/log_metadata.py {{sim_dir}} merge_ts start_time=$start_time end_time=$end_time status='COMPLETED'"
    echo $cmd
    $cmd

else
    echo "failed"
    python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py {{mgmt_db_location}}/mgmt_db_queue {{srf_name}} merge_ts failed $SLURM_JOB_ID --error "$res" --end_time "$end_time"

fi
