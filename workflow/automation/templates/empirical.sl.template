
if [[ ! -z ${CUR_ENV} && ${CUR_HPC} != "mahuika" ]]; then
    source $CUR_ENV/workflow/workflow/environments/helper_functions/activate_env.sh $CUR_ENV "mahuika"
fi

export EMP_PATH=$gmsim/Empirical_Engine
export PYTHONPATH=$gmsim/qcore:/$PYTHONPATH:$IMPATH

script_start=`date`
echo "script started running at: $script_start"
runtime_fmt="%Y-%m-%d_%H:%M:%S"
start_time=`date +$runtime_fmt`

echo ___calculating empirical___
{% for run_name, fault_name in run_data %}
    echo {{run_name}}
    {% set output_dir = mgmt_db_location ~"/Runs/" ~fault_name ~"/" ~run_name ~"/" ~"verification/" %}

    #update db to running
    timestamp=`date +%Y%m%d_%H%M%S`
    python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py {{mgmt_db_location}}/mgmt_db_queue {{run_name}} Empirical running $SLURM_JOB_ID --start_time "$start_time" --nodes $SLURM_NNODES --cores $SLURM_NTASKS --wct "$wct"
    #run the script
    time python $EMP_PATH/empirical/scripts/calculate_empirical.py {{output_dir}} {{extended_switch}} --ll_ffp {{ll_ffp}} --vs30_ffp {{vs30_ffp}} {{z_switch}} --srf_ffp {{srf_ffp}} {{srfdata_switch}}

end_time=`date +$runtime_fmt`

    #test before update mgmt_db -- Needs a test to see if files are output
    timestamp=`date +%Y%m%d_%H%M%S`

    if [[ -f {{output_dir}}/{{run_name}}.csv ]]; then #file exists = passed
        #update mgmt_db
        python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py {{mgmt_db_location}}/mgmt_db_queue {{run_name}} Empirical completed $SLURM_JOB_ID --end_time "$end_time"
        #save metadata for collection
    else
        #failed
        python $gmsim/workflow/workflow/automation/execution_scripts/add_to_mgmt_queue.py {{mgmt_db_location}}/mgmt_db_queue {{run_name}} Empirical failed $SLURM_JOB_ID --error "$res" --end_time "$end_time"
    fi
{% endfor %}
date
